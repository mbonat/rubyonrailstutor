puts "'*'*3 will return" + " '" + "*"*3  + "'"
puts "\n'john' + 'davison' will return" + " '" + "john" + "davison"  + "'"
puts "\n'john' << 'davison' will return" + " '" + "john" << "davison"  + "'"
a = "john"
b = "john"
c = "johnd"
d = "JohnD"
puts "\n'john' <=> 'john' will return" + " '" + ("john"<=>"john").to_s  + "'"
puts "\n'john' <=> 'johnd' will return" + " '" + ("john"<=>"johnd").to_s  + "'"
puts "\n'johnd' <=> 'john' will return" + " '" + ("johnd"<=>"john").to_s  + "'"
puts "\n'john' == 'john' will return" + " '" + ("john"=="john").to_s  + "'"
puts "\n'john' === 'john' will return" + " '" + ("john"==="john").to_s  + "'"
puts "\n'john' =~ /n/ will return" + " '" + ("john"=~/n/).to_s  + "'"
puts "\n'john'[0] will return" + " '" + ("john"[0]).to_s  + "'"
puts "\n'john'[0..2] will return" + " '" + ("john"[0..2]).to_s  + "'"
puts "\n'john'[1,3] will return" + " '" + ("john"[1,3]).to_s  + "'"
puts "\nthe bytesize is " + a.bytesize.to_s
puts "\n'john'.byteslice(0) returns" + " " + a.byteslice(0).to_s 
a = "a message"
puts "\n'a message'.capitalize returns" + " '" + a.capitalize.to_s + "' but doesn't change the variable"
p a
puts "\n'a message'.capitalize! returns" + " '" + a.capitalize!.to_s + "' but changes the variable nil if no change made"
p a
puts "\n'John'.casecmp('john') returns" + " '" + "John".casecmp("john").to_s + "'"
"john".chars {|x| p x } #will do something to each character
puts "john\njohn" #will actually evaulate the \n and pring on newline when printing
puts "john\njohn" #will print the string absolutely without the newline
puts "\n'john'.chomp('n') will return" + " '" + "john".chomp("n").to_s + "'"
puts "\na = 'john' a.chomp!('n') will return" + " '" + "john".chomp!("n").to_s + " 'and change the variable"
puts "\n'john'.chop will return" + " '" + "john".chop.to_s + "'"
puts "\n'john'.chr will return" + " '" + "john".chr + "'"
puts "\n'john'.clear will return" + " '" + "john".clear + "'"
puts "\n'john'.count('j') will return" + " '" + "john".count('j').to_s + "'"
puts "\n'john'.crypt('A1') will return" + " '" + "john".crypt('A1').to_s + "', param is salt string [A-z,0-9]"
puts "\n'john'.delete('j') will return" + " '" + "john".delete('j').to_s + "'"
puts "\n'AnyStringWithSTUFF'.downcase will return" + " '" + "AnyStringWithSTUFF".downcase.to_s + "'" 
puts "\n'john'.include?('j') will return" + " '" + "john".include?('j').to_s + "'"
puts "\n'john'.index('j') will return" + " '" + "john".index('j').to_s + "', can also be passed 2nd param, starting index"
puts "\n'john'.insert(0,'j') will return" + " '" + "john".insert(0,'j').to_s + "', first param starting, 2nd to be inserted"
puts "\n'john'.match(/jo/) will return" + " '" + "john".match(/jo/).to_s + "'"
puts "\n'john'.replace('davison') will return" + " '" + "john".replace("davison").to_s + "'"
puts "\n'john'.ljust(30,'davison') will return" + " '" + "john".ljust(30,"davison").to_s + "'"
puts "\n'john'.ljust(30)will return" + " '" + "john".ljust(30).to_s + "'"
puts "\n'john'.rjust(30,will return" + " '" + "john".rjust(30,"davison").to_s + "'"
puts "\n'john'.rjust(30)will return" + " '" + "john".rjust(30).to_s + "'"
puts "\n'somerandommessage'.slice(5,5)will return" + " '" + "somerandommessage".slice(5,5).to_s + "'"
puts "\n'this is a word that will be split'.split(' ')will return" + " '" + "this is a word that will be split".split(' ').to_s + "'"
puts "\n'this is a word that will be split'.split(' ')will return" + " '" + "this is a word that will be split".split(' ').to_s + "'"
puts "\n'    john    '.strip will return" + " '" + "john".strip.to_s + "'"
puts "\n'johnj'.sub(/j/,*) will return" + " '" + "johnj".sub(/j/,"*").to_s + "'"
puts "\n'AnyStringWithSTUFFString'.gsub(/String/,'***') will return" + " '" + "AnyStringWithSTUFFString".gsub(/String/, '***').to_s + "'" 
puts "\n'john'.succ will return" + " '" + "john".succ.to_s + "'"
puts "\n'1234'.succ will return" + " '" + "1234".succ.to_s + "'"
puts "\n'jOhN'.swapcase will return" + " '" + "jOhN".swapcase.to_s + "'"
puts "\n'jOhN'.swapcase will return" + " '" + "jOhN".swapcase.to_s + "'"
puts "\n'8'.upto('20') will return" + " '" + "8".upto("20").to_a.to_s + "'"
